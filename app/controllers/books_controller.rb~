require 'prawn'
include ActionView::Helpers::TextHelper

class BooksController < AuthenticatedController
  def create
    if Person.all.count > 0
      generate_pdfs
      inspect_pdfs
      generate_index
    end
    redirect_to books_path
  end

  private

  def generate_index
  end

  def inspect_pdfs
    Person.where('primary_kbn IS NOT NULL').where.not(:primary_kbn => '').order(:primary_kbn).each do |person|
      person.pages = ''
      (1..9).to_a.each do |generation|
        reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{generation}.pdf")
        reader.pages.each_with_index do |page, index|
          unless person.pages.include?(index)
            person.pages << index + starting_page_number(generation) if page.text.include?("#{person.primary_kbn}     #{person.name}")
            person.pages << index + starting_page_number(generation) if page.text.include?("#{person.name} (#{person.primary_kbn})")
          end
        end
      end
      person.pages_will_change!
      person.save
    end
  end

  def starting_page_number(generation)
    page = 1
    if generation > 1
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{1}.pdf")
     page += reader.page_count
    end
    if generation > 2
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{2}.pdf")
     page += reader.page_count
    end
    if generation > 3
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{3}.pdf")
     page += reader.page_count
    end
    if generation > 4
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{4}.pdf")
     page += reader.page_count
    end
    if generation > 5
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{5}.pdf")
     page += reader.page_count
    end
    if generation > 6
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{6}.pdf")
     page += reader.page_count
    end
    if generation > 7
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{7}.pdf")
     page += reader.page_count
    end
    if generation > 8
     reader = PDF::Reader.new("app/assets/exports/pdfs/family_registry#{8}.pdf")
     page += reader.page_count
    end
    page
  end

  def generate_pdfs
    # Cover page produce elsewhere and merged with the following documents
    # pdf = Prawn::Document.new
    # setup_font(pdf)
    # pdf.font_size 24

    # pdf.move_down 250
    # pdf.text '<b>THE KOTHMANNS OF TEXAS</b>', :align => :center, :inline_format => true
    # pdf.text '1845-2015', :align => :center
    # pdf.move_down 18
    # pdf.text 'FAMILY REGISTER', :align => :center
    # pdf.move_down 27
    # pdf.font_size 14
    # pdf.text 'STAMMVATER: Hennig Heinrich Kothmann', :align => :center
    # pdf.move_down 15
    # pdf.text 'Hennig Heinrich Kothmann and Ilse Dorothee Marwede, both born in Wedelheine, Germany (dates not available).', :align => :center

    # pdf.start_new_page
   
    # generate_pdf(pdf,0)

    ##### FIRST GENERATION #####

   
    pdf = Prawn::Document.new
    print_generation_header(pdf, 1)
    pdf.start_new_page

    root = Person.find_by_kbn('0')
    generation_text = ''
    generation_text << print_person(root, nil) + "\n"
    # pdf.column_box([0, pdf.cursor], :columns => 2, :width => pdf.bounds.width, :align => :justify) do
    #  pdf.text generation_text, :inline_format => true
    pdf.column_box([0, pdf.cursor], :columns => 1, :width => pdf.bounds.width, :align => :justify) do
      pdf.text generation_text, :inline_format => true
    end
    
      
    pdf.start_new_page

    generate_pdf(pdf, 1)

    ##### SECOND GENERATION #####

    pdf = Prawn::Document.new
    setup_font(pdf)
    print_generation_header(pdf, 2)
    
    #If there are odd # of pages in pdf add one so next section start on odd page  
    #pdf.start_new_page if pdf.page_count.odd?
    pdf.start_new_page
    generation_text = ''
    root.relationships.each_with_index do |relationship, index|
      partner = Person.where(:id => relationship.partner_ids).where.not(:id => root.id).first
      child_count = relationship.children.count
      next if partner.nil? || child_count <= 0
      if root.relationships.count > 1
        generation_text << "\n<b>Children of #{root.name} (0) and #{(index + 1).to_i.ordinalise} #{(root.male) ? 'wife' : 'husband'} #{partner.name}:</b>\n\n"
      else
        generation_text << "\n<b>Children of #{root.name} (0) and #{partner.name}:</b>\n\n"
      end
      relationship.children.order('kbns ASC').each do |child|
        # generation_text << print_person(child, '0') + "\n"
        generation_text << print_person(child, '0')
      end
    end
    # pdf.column_box([0, pdf.cursor], :columns => 2, :width => pdf.bounds.width, :align => :justify) do
    #   pdf.text generation_text, :inline_format => true
    pdf.column_box([0, pdf.cursor], :columns => 1, :width => pdf.bounds.width, :align => :justify) do
      pdf.text generation_text, :inline_format => true
    end
    # If there are even # of pages in pdf add one so next section start on odd page  
    # pdf.start_new_page if pdf.page_count.even?
    
    generate_pdf(pdf, 2)

    ##### THIRD - NINTH GENERATION #####

    children = generate_generation(Person.where(:id => root.id), 3)
    children = generate_generation(children, 4)
    children = generate_generation(children, 5)
    children = generate_generation(children, 6)
    children = generate_generation(children, 7)
    children = generate_generation(children, 8)
    generate_generation(children, 9)
  end

  def setup_font(pdf)
    pdf.font_families['Palatino'] = {
      :normal      => { :file => Rails.root + 'app/assets/fonts/Palatino.ttf', :font => 'Palatino' },
      :italic      => { :file => Rails.root + 'app/assets/fonts/Palatino-Italic.ttf', :font => 'Palatino-Italic' },
      :bold        => { :file => Rails.root + 'app/assets/fonts/Palatino-Bold.ttf', :font => 'Palatino-Bold' },
      :bold_italic => { :file => Rails.root + 'app/assets/fonts/Palatino-BoldItalic.ttf', :font => 'Palatino-BoldItalic' }
    }
    pdf.font('Palatino')
    pdf.font_size 10
  end

  def generate_pdf(pdf, number)
    
    if number != 0
    #If there are odd # of pages in pdf add one so next section start on odd page  
    pdf.start_new_page if pdf.page_count.odd?

    # pdf.number_pages '<page>', :at => [pdf.bounds.right - 50, 0], :width => 50, :align => :right, :start_count_at => starting_page_number(number)
    #Page numbers on odd numbered pages
    pdf.number_pages '<page>', :at => [pdf.bounds.right - 50, 0], :width => 50, :align => :right, :start_count_at => starting_page_number(number) , :page_filter => :odd
    #Footer for even numbered pages
    pdf.repeat(:even) do
    pdf.draw_text "Kothmanns of Texas", :at => [pdf.bounds.right - 80, -10] 
    end
    #Page numbers on even numbered pages
    pdf.number_pages '<page>', :at => [pdf.bounds.left - 0, 0], :width => 50, :align => :left, :start_count_at => starting_page_number(number) + 1, :page_filter => :even
    #Footer for odd numbered pages   
    pdf.repeat(:odd) do
         if number == 1
        pdf.draw_text "Genealogy, Chapter 1, Generation 1", :at => [pdf.bounds.left - 0, -10]
         end
         if number == 2
        pdf.draw_text "Genealogy, Chapter 2, Generation 2", :at => [pdf.bounds.left - 0, -10]
         end
         if number == 3
        pdf.draw_text "Genealogy, Chapter 3, Generation 3", :at => [pdf.bounds.left - 0, -10]
         end
         if number == 4 
        pdf.draw_text "Genealogy, Chapter 4, Generation 4", :at => [pdf.bounds.left - 0, -10]    
         end
         if number == 5 
        pdf.draw_text "Genealogy, Chapter 5, Generation 5", :at => [pdf.bounds.left - 0, -10]    
         end
         if number == 6 
        pdf.draw_text "Genealogy, Chapter 6, Generation 6", :at => [pdf.bounds.left - 0, -10]    
         end
         if number == 7 
        pdf.draw_text "Genealogy, Chapter 7, Generation 7", :at => [pdf.bounds.left - 0, -10]    
         end
         if number == 8 
        pdf.draw_text "Genealogy, Chapter 8, Generation 8", :at => [pdf.bounds.left - 0, -10]    
         end
         if number == 9 
        pdf.draw_text "Genealogy, Chapter 9, Generation 9", :at => [pdf.bounds.left - 0, -10]    
         end
    end
    end

    #       pdf.repeat :odd do
    #         pdf.bounding_box [pdf.bounds.left, pdf.bounds.bottom + 13], :width  => pdf.bounds.width do
    #           pdf.text "Left Odd Generation #"
    #         end
    #       end
    #       pdf.repeat :even do
    #         pdf.bounding_box [pdf.bounds.right + 100, pdf.bounds.bottom + 13], :width  => pdf.bounds.width do
    #           pdf.text "Right Even Generation #"
    #         end
    #       end
    pdf.render_file "app/assets/exports/pdfs/family_registry#{number}.pdf"
  end

  def generate_generation(children, number)
    pdf = Prawn::Document.new
    setup_font(pdf)
    children = Person.children(children)
    if children.any?
      generation_text = print_generation(children)

      print_generation_header(pdf, number)
      pdf.start_new_page
      # pdf.column_box([0, pdf.cursor], :columns => 2, :width => pdf.bounds.width, :align => :justify) do
      # pdf.text generation_text, :inline_format => true
      pdf.column_box([0, pdf.cursor], :columns => 1, :width => pdf.bounds.width, :align => :justify) do
        pdf.text generation_text, :inline_format => true
      end
    
      generate_pdf(pdf, number)
    end
    children
  end

  def print_generation_header(pdf, number)
    pdf.start_new_page if pdf.page_number.even?
    pdf.font_families['Beckett'] = {
      :normal => { :file => Rails.root + 'app/assets/fonts/Beckett.ttf', :font => 'Beckett' }
    }
    pdf.font('Beckett')
    pdf.font_size 44

    pdf.move_down 150
    pdf.text "Chapter #{number}", :align => :center, :inline_format => true
    pdf.move_down 50
    pdf.text number.ordinalise.titleize, :align => :center, :inline_format => true
    pdf.move_down 10
    pdf.text 'Generation', :align => :center, :inline_format => true
    pdf.move_down 50
    logo = Rails.root + 'app/assets/images/logo_bw.png'
    pdf.image logo, :scale => 0.22, :position => :center
    pdf.start_new_page
    setup_font(pdf)
  end

  def print_generation(people)
    text = '' 
    last_kbn = ''
    people.each do |person|
      if last_kbn == ''
        kbn = last_kbn = person.kbns.first
      else
        kbn = last_kbn = person.kbn_based_on_last_kbn(last_kbn)
      end
      person.relationships.each_with_index do |relationship, index|
        partner = Person.where(:id => relationship.partner_ids).where.not(:id => person.id).first
        child_count = relationship.children.count
        next if partner.nil? || child_count <= 0
        # 2 adopted others desendants
          if person.primary_kbn == '812131'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Children of Robin Lynette Turner (812131), adopted by husband Terry Bryant:</b>\n"
          elsif child_index == 1 && child.adoption_type.present?
          else
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"
          end
          end
        # 1 child adopted
        elsif person.primary_kbn == '81332'
          text << "\n<b>Child of Brenda 'Joy' Adair (81332), adopted by second husband Marshell Grabeal:</b>\n"
        # All children adopted
        elsif person.primary_kbn == '9911'        
          text << "\n<b>Children of Patricia Joyce Loudermilk (9911) and first husband Jimmie Heard, adopted by her second husband Thomas Walthier:</b>\n"
        # 1 adopted others children desendants
        elsif person.primary_kbn == '83511'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Child of Michael Perry Goff (83511) and first wife Maggie Jones, adopted and raised by grandmother Minnie Louise Leifeste Gentry (8351):</b>\n"
          elsif child_index == 1 
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"
          else
          end
          end
        # All children adopted
        elsif person.primary_kbn == '5D21'
          text << "\n<b>Children of Katherine Jean Leifeste (5D21) and first husband William Ray Lentz, adopted by her second husband Burlen Horton:</b>\n"
        # 2 children adopted and child desendant
        elsif person.primary_kbn == '5621'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Children of Shirley Beth Grote (5621) and first husband Neely Roy Kight, adopted by her second husband William Lewis Lyles:</b>\n"
          elsif child_index == 1 && child.adoption_type.present?
          else
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"
          end
          end
         # Child adopted
          elsif person.primary_kbn == '51111'
          text << "\n<b>Child of Glenda Marie Muennink (51111) and first husband Robert Brenner, adopted by her second husband Robert 'Bob' Gifford:</b>\n"
        # 1 child adopted others desendants
        elsif person.primary_kbn == '48331'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Child of Cynthia Sue Follis Albert (48331), adopted by Cynthia's parents Ruby Nell and Charlton Albert:</b>\n"
          else 
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"       
          end
          end 
        # 1 child adopted  
        elsif person.primary_kbn == '4761'
          text << "\n<b>Child of Wayne Dudley Woodress (4761) and first wife Bonnie Baker, adopted by his second wife Marylin Kay Salmon:</b>\n"
        # 1 child adopted
        elsif person.primary_kbn == '4744'
          text << "\n<b>Child of Merle Arleen Kothmann (4744) and first husband Brian Loren Mayott, adopted by her second husband Jerome Weaver:</b>\n"
        # 3 children adopted others desendants
        elsif person.primary_kbn == '47121'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Children of Diane Loeffler (47121) and first husband Jammie Dwight Holland, adopted by her second husband David Whitworth:</b>\n"
          elsif child_index == 1 && child.adoption_type.present?
          elsif child_index == 2 && child.adoption_type.present?
          elsif child_index == 0 && ! child.adoption_type.present?
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"
          else
          end
          end
        # 1 adopted child other children desendants
        elsif person.primary_kbn == '43284'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Children of Robin Kay Rusche (43284) and first husband Christopher Edward Monnier, adopted by her second husband Christopher Monnier:</b>\n"
          else 
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"       
          end
          end
        # All children adopted 
        elsif person.primary_kbn == '432211'
          text << "\n<b>Children of Kathleen Gayle Coleman (432211) and first husband Rafeal Calvo Acofta, adopted by her second husband Leonard James Jared:</b>\n"
        # 1 child adopted other child desendant
        elsif person.primary_kbn == '42531'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Child of Linda Louise Lehmberg (42531) and first husband Michael Dean Lamkin, adopted by her second husband John Thomas 'Buster' Terrell:</b>\n"
          else 
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"       
          end
          end 
        # 1 child adopted other child desendant
        elsif person.primary_kbn == '357121'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Child of Kara Rene Crouch (357121), adopted by her first husband Talor L. D. Hollingshead:</b>\n"
          else 
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"       
          end
          end
        # 1 child adopted 
        elsif person.primary_kbn == '353211'
          text << "\n<b>Child of Kimberly Martin (353211) and first husband Jimmy Stiles, adopted by her second husband Harvey Metcalf:</b>\n"
        # 1 child adopted other children desendants
        elsif person.primary_kbn == '342111'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Child of Helen Frances Goode (342111) and first husband John Timothy Luton, adopted by her second husband Alexander Tong:</b>\n"
          else 
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"       
          end
          end
       # 1 child adopted other children desendants   
        elsif person.primary_kbn == '3334'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
          if child_index == 0 && child.adoption_type.present?
          text << "\n<b>Children of Lois Lorene Keller (3334) and first husband Daryl Hansen, adopted by her second husband Roy Lester Tartt:</b>\n"
          else 
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"       
          end 
          end
       # All children adopted 
          text << "\n<b>Children of Dawn Renay Osbourn (122112) and first husband Troy Saxbury, adopted by her second husband Brian Vance:</b>\n"
       # All children adopted
        elsif person.primary_kbn == '4833'
          text << "\n<b>Children of Ruby Nell Kothmann (4833) and first husband David Ray Follis, adopted by her second husband Charlton Albert:</b>\n"
       
       # Normal Processing 
       # Married multiple relationships with parent name 
         elsif person.relationships.count > 1 && child_count == 1 &&  ! relationship.marriage_day.blank? && ! partner.name.blank?
          
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"  
         elsif person.relationships.count > 1 && child_count > 1 &&  ! relationship.marriage_day.blank?&& ! partner.name.blank?
         
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n" 

       # Married single relationship with parent name
        elsif person.relationships.count == 1 && child_count > 1 &&  ! relationship.marriage_day.blank? && ! partner.name.blank? 
            
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"
        elsif person.relationships.count == 1 && child_count == 1 && ! relationship.marriage_day.blank? && ! partner.name.blank?
           
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"
           
       # Not married multipleand no parent name 
        elsif person.relationships.count > 1 && child_count == 1 && relationship.marriage_day.blank? && partner.name.blank?
          
         text << "\n<b>Child of #{person.name} (#{kbn}):</b>\n" 
             
        elsif person.relationships.count > 1 && child_count > 1 && relationship.marriage_day.blank? && partner.name.blank?
          
          text << "\n<b>Children of #{person.name} (#{kbn}):</b>\n"

       # Not married single with parent name 
        elsif person.relationships.count == 1 && child_count == 1 && relationship.marriage_day.blank? && ! partner.name.blank?
         
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"    
        elsif person.relationships.count == 1 && child_count > 1 && relationship.marriage_day.blank? && ! partner.name.blank?
         
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}:</b>\n"

       # Married single relationship with parent name
        elsif person.relationships.count > 1 && child_count > 1 && relationship.marriage_day.blank? && ! partner.name.blank? 
           partner_kbn = (partner.primary_kbn.present?) ? " (#{partner.primary_kbn})" : '' 
          text << "\n<b>Children of #{person.name} (#{kbn}) and #{partner.name}#{partner_kbn}:</b>\n"
        elsif person.relationships.count > 1 && child_count == 1 && relationship.marriage_day.blank? && ! partner.name.blank?
          partner_kbn = (partner.primary_kbn.present?) ? " (#{partner.primary_kbn})" : '' 
          text << "\n<b>Child of #{person.name} (#{kbn}) and #{partner.name}#{partner_kbn}:</b>\n"

       # Not married no parent name 
        elsif person.relationships.count == 1 && child_count == 1 && relationship.marriage_day.blank? && partner.name.blank?
          
         text << "\n<b>Child of #{person.name} (#{kbn}):</b>\n" 
             
        elsif person.relationships.count == 1 && child_count > 1 && relationship.marriage_day.blank? && partner.name.blank?
           
          text << "\n<b>Children of #{person.name} (#{kbn}):</b>\n"
           
        end
        
       # All children adopted
          if person.primary_kbn == '4A32'
          relationship.children.order('kbns ASC').each_with_index do |child, child_index|
            if child_index == 1
              text << "\n<b>Children of Mary Anna Kothmann (4A32) and second husband James Eugene Parker, adopted in 1970 by her father Karl W. Kothmann(4A3):</b>\n"
            end
             #text << print_person(child, kbn) 
              text << print_person(child, kbn)
          end
            else
            relationship.children.order('kbns ASC').each do |child|
            # text << print_person(child, kbn) 
              text << print_person(child, kbn)
            end
        end
      end
    end
    text 
  end

  def print_person(person, _parent_kbn)
    person_text = ''
   # When db is updated remove # on the next 5 lines of code
   # if twin == 'Yes'
   # twin = ', Twin'
   # else
   # twin = ''
   # end
   # When database is updated remove # on next line
   #  person_text << "#{person.primary_kbn}         #{person.name}#{twin},#{date_text(person, true, nil)}."
   # When db is updated comment the next line
    person_text << "#{person.primary_kbn}         #{person.name}#{date_text(person, true, nil)}."
    person.relationships.each_with_index do |relationship, index|
      child_count = relationship.children.count
      partner = Person.where(:id => relationship.partner_ids).where.not(:id => person.id).first
      marriage_date = relationship.marriage_day
      divorced = (relationship.divorce_day.nil?) ? false : true
      partner_kbn = (partner.primary_kbn.present?) ? " (#{partner.primary_kbn})" : ''
      # if index == 0
        #if  ! marriage_date.blank?
        
       # person_text << "  Married"
       # person_text << "#{(marriage_date.nil?) ? ' ' : " #{marriage_date} "}"
       # person_text << "to:\n#{(divorced) ? '**' : '*'}#{partner.name}#{partner_kbn},\n#{date_text(partner, false, relationship.divorce_day)}"
       # else
       # if partner.name.blank?
       # else
       # person_text << "\n#{partner.name}"
       # end
       # end
        if !marriage_date.blank?
       # When database updated then the next two lines are uncommented and the third line is commented
       # previous_name = (partner.other_name.present?) ? " (#{partner.other_name})" : ''
       # person_text << "\n#{(divorced) ? '**' : '*'}#{partner.name}#{previous_name}#{partner_kbn};\n married #{(person.male) ? 'him' : 'her'}#{(marriage_date.nil?) ? ' ' : " #{marriage_date};"} #{date_text(partner, false, relationship.divorce_day)}"
        person_text << "\n#{(divorced) ? '**' : '*'}#{partner.name}#{partner_kbn}; married #{(person.male) ? 'him' : 'her'} #{(marriage_date.nil?) ? ' ' : "#{marriage_date}"}#{date_text(partner, false, relationship.divorce_day)}"
        # else
         # if partner.name.blank?
         # else
         # person_text << "\n#{partner.name}"
         # end
        end
     # end
      if !marriage_date.blank?
      person_text << "; #{pluralize(child_count, 'child')} by this union" if person.partners.count > 1
      end
       # if !partner.name.blank?
        if !marriage_date.blank?
        person_text << '.'
        end
      if person.primary_kbn.present? && partner.primary_kbn.present?
        child_kbn_root = relationship.children.first.primary_kbn[0..-2]
        if child_kbn_root == person.primary_kbn
          person_text << "\nAll children listed under #{person.name}'s KBN."
        else
          person_text << "\nAll children listed under #{partner.name}'s KBN."
        end
      end
      # person_text << "\n" unless index == 0
    end
    # Descendants by generation
    count = person.descendants
    
    
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Total #{'descendant'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.first_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 1}").uniq.count
    end
    if count > 0
      # person_text << "\n#{pluralize(#{count}, 'child').titleize}"
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@#{'Child'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.second_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 2}").uniq.count
    end
    if count > 0
     # person_text << "\n#{pluralize(#{count}, 'grandchild').titleize}"
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@#{'Grandchild'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.third_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 3}").uniq.count
    end
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Great #{'grandchild'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.fourth_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 4}").uniq.count
    end
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Great great #{'grandchild'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.fifth_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 5}").uniq.count
    end
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Great great great #{'grandchild'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.sixth_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 6}").uniq.count
    end
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Great great great great #{'grandchild'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.seventh_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 7}").uniq.count
    end
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Great great great great great #{'grandchild'.pluralize(count)}"
        count = Person.where.overlap(:kbns => person.eighth_generation).where("LENGTH(primary_kbn) = #{((person.primary_kbn == '0') ? 0 : person.primary_kbn.length) + 8}").uniq.count
    end
    if count > 0
        #srt = "#{sprintf("%7d", count)}"
        #string = srt.gsub(/ (?= )/, '@')
        person_text << "\n@#{count}@Great great great great great great #{'grandchild'.pluralize(count)}"
    end
    #       page_lookup[person.kbn] = pdf.page_count
    #       page_lookup
        person_text + "\n"
  end

  def date_text(person, show_location, divorce_day)
    date_text = ''
    if person.birth_day.present?
       born_text = "born #{person.birth_day}"
      if show_location && person.birth_place.present?
       born_text += "; " if born_text != 'born '
       born_text += " #{person.birth_place}"
      end
    end
    if person.adoption_type.present?
      adoption_type_initial = person.adoption_type[0, 1]
      if adoption_type_initial == 'C'
      elsif adoption_type_initial == 'B'
        if person.adopted_day.present?
          adoption_text = "adopted #{person.adopted_day}"
        else
          adoption_text = 'adopted, date unknown'
        end
        if person.adoption_text.present?
          adoption_text << ", #{person.adoption_text}"
        end
      elsif adoption_type_initial == 'A'
        if person.adopted_day.present?
          adoption_text = "adopted #{person.adopted_day}"
        else
          adoption_text = 'adopted, date unknown'
        end
      end
    end
    if person.death_day.present?
      death_text = "died #{person.death_day}"
      if show_location && person.death_place.present?
        death_text += ', ' if death_text != 'died '
        death_text += "buried #{person.death_place}"
      end
    end
    date_text += "; #{born_text}" if born_text.present?
    date_text += "; #{adoption_text}" if adoption_text.present?
    date_text += "; #{death_text}" if death_text.present?
    date_text += "; Divorced #{divorce_day}" if divorce_day.present?
    date_text
  end
end
